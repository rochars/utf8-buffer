/*
 * Copyright (c) 2018 Rafael da Silva Rocha.
 */

/**
 * @fileoverview UTF-8 tests.
 * @see https://github.com/rochars/utf8-buffer
 */

var utf8Buffer = utf8Buffer || require('../../test/loader.js');
var assert = assert || require('assert');
var Buffer = Buffer || false;

describe('replace invalid characters', function() {
    it('replaces invalid 2 byte UTF-8 char (2nd byte)', function() {
        assert.equal(utf8Buffer.unpack([0xa0,0xa1]), '\uFFFD\uFFFD');
    });
    // 3 bytes
    it('replaces invalid 3 byte UTF-8 char (2rd byte)', function() {
        assert.equal(utf8Buffer.unpack([0xe2,0x28,0xa1]), '\uFFFD');
    });
    it('replaces invalid 3 byte UTF-8 char (2rd byte)', function() {
        assert.equal(utf8Buffer.unpack(
            [97,0xe2,0x28,0xa1,98]), 'a\uFFFDb');
    });
    it('replaces invalid 3 byte UTF-8 char (3rd byte)', function() {
        assert.equal(utf8Buffer.unpack([0xe2,0x82,0x28]), '\uFFFD');
    });
    it('replaces invalid 3 byte UTF-8 char (3rd byte)', function() {
        assert.equal(utf8Buffer.unpack([0xe2,0xE0,0x28]), '\uFFFD');
    });
    it('replaces invalid 3 byte UTF-8 char (3rd byte)', function() {
        assert.equal(utf8Buffer.unpack([0xe2,0xED,0x28]), '\uFFFD');
    });
    // 4 bytes
    it('replaces invalid 4 byte UTF-8 char (2th byte)', function() {
        assert.equal(utf8Buffer.unpack([0xf0,0x28,0x8c,0xbc]), '\uFFFD');
    });
    it('replaces invalid 4 byte UTF-8 char (3th byte)', function() {
        assert.equal(utf8Buffer.unpack([0xf0,0x90,0x28,0xbc]), '\uFFFD');
    });
    it('replaces invalid 4 byte UTF-8 char (4th byte)', function() {
        assert.equal(utf8Buffer.unpack(
            [97,0xf0,0x28,0x8c,0x28,240,175,167,159,240,175,167,159]),
        'a\uFFFDð¯§Ÿð¯§Ÿ');
    });
    it('replaces invalid 4 byte UTF-8 char (4th byte)', function() {
        assert.equal(utf8Buffer.unpack([0xf0,0xF4,0x8c,0x28]), '\uFFFD');
    });
    it('replaces invalid 4 byte UTF-8 char (4th byte)', function() {
        assert.equal(utf8Buffer.unpack([0xf0,0xF0,0x8c,0x28]), '\uFFFD');
    });

})

// pack
describe('unpack UTF-8 strings, 4 bytes', function() {
    it('pack BOM + ð¯§Ÿ as a byte array', function() {
        // ð¯§Ÿ CJK COMPATIBILITY IDEOGRAPH-2F9DF (U+2F9DF) f0 af a7 9f
        var chars = '\ufeffð¯§Ÿ';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                0xEF,0xBB,0xBF,
                240,175,167,159],
            buffer);
    });
});
describe('unpack UTF-8 strings, 4 bytes', function() {
    it('pack ð¯§Ÿ + BOM + ð¯§Ÿ as a byte array', function() {
        // ð¯§Ÿ   CJK COMPATIBILITY IDEOGRAPH-2F9DF (U+2F9DF) f0 af a7 9f
        var chars = 'ð¯§Ÿ\ufeffð¯§Ÿ';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                240,175,167,159,
                0xEF,0xBB,0xBF,
                240,175,167,159],
            buffer);
    });
});
describe('pack UTF-8 strings, 4 bytes', function() {
    it('pack ð¯§Ÿ as a byte array', function() {
        // ð¯§Ÿ CJK COMPATIBILITY IDEOGRAPH-2F9DF (U+2F9DF) f0 af a7 9f
        var chars = 'ð¯§Ÿ';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [240,175,167,159],
            buffer);
    });
    it('pack ð¯§Ÿð¯§Ÿ as a byte array', function() {
        var chars = 'ð¯§Ÿð¯§Ÿ';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                240,175,167,159,
                240,175,167,159],
            buffer);
    });
    it('pack ð¯§Ÿð¯§Ÿï§¸ß¹~$ as a byte array', function() {
        var chars = 'ð¯§Ÿð¯§Ÿï§¸ß¹~$';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                240,175,167,159,
                240,175,167,159,
                239, 167, 184,
                223, 185,
                126,
                36],
            buffer);
    });
    it('pack ð¯§Ÿð¯§Ÿï§¸ß¹~$ð¯§Ÿ as a byte array', function() {
        var chars = 'ð¯§Ÿð¯§Ÿï§¸ß¹~$ð¯§Ÿ';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                240,175,167,159,
                240,175,167,159,
                239, 167, 184,
                223, 185,
                126,
                36,
                240,175,167,159],
            buffer);
    });
});
describe('pack UTF-8 strings, 3 bytes', function() {
    it('pack ï§¸ as a byte array', function() {
        // CJK COMPATIBILITY IDEOGRAPH-F9F8 (U+F9F8) ef a7 b8
        var chars = 'ï§¸';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [239, 167, 184],
            buffer);
    });
    it('pack ï§¸ï§¸ as a byte array', function() {
        var chars = 'ï§¸ï§¸';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                239, 167, 184,
                239, 167, 184],
            buffer);
    });
    it('pack ï§¸ï§¸ß¹~$ as a byte array', function() {
        var chars = 'ï§¸ï§¸ß¹~$';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                239, 167, 184,
                239, 167, 184,
                223, 185,
                126,
                36],
            buffer);
    });
    it('pack ï§¸ï§¸ß¹~$ï§¸ as a byte array', function() {
        var chars = 'ï§¸ï§¸ß¹~$ï§¸';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [
                239, 167, 184,
                239, 167, 184,
                223, 185,
                126,
                36,
                239, 167, 184],
            buffer);
    });
});
describe('pack UTF-8 strings, 2 bytes', function() {
    it('pack ß¹ as a byte array', function() {
        var chars = 'ß¹'; // NKO EXCLAMATION MARK (U+07F9)
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [223, 185],
            buffer);
    });
    it('pack ß¹ß¹ as a byte array', function() {
        var chars = 'ß¹ß¹';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [223, 185, 223, 185],
            buffer);
    });
    it('pack ß¹ß¹~$ as a byte array', function() {
        var chars = 'ß¹ß¹~$';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [223, 185, 223, 185, 126, 36],
            buffer);
    });
    it('pack ß¹ß¹~$ß¹ as a byte array', function() {
        var chars = 'ß¹ß¹~$ß¹';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [223, 185, 223, 185, 126, 36, 223, 185],
            buffer);
    });
});
describe('pack UTF-8 strings, 1 byte', function() {
    it('pack ~ as a byte array', function() {
        var chars = '~'; // TILDE (U+007E)  7e
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [126],
            buffer);
    });
    it('pack ~~ as a byte array', function() {
        var chars = '~~';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
       assert.deepEqual(
            [126, 126],
            buffer);
    });
    it('pack ~~$ as a byte array', function() {
        var chars = '~~$';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [126, 126, 36],
            buffer);
    });
    it('pack ~~$~ as a byte array', function() {
        var chars = '~~$~';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual(
            [126, 126, 36, 126],
            buffer);
    });
});
describe('pack ASCII strings', function() {
    it('pack $ as a byte array', function() {
        var chars = '$';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual([36], buffer);
    });
    it('pack $$ as a byte array', function() {
        var chars = '$$';
        var buffer = [];
        utf8Buffer.pack(chars, buffer);
        assert.deepEqual([36, 36], buffer);
    });
});

// unpack
describe('unpack UTF-8 strings, 4 bytes with BOM', function() {
    it('unpack BOM + ð¯§Ÿ from a byte buffer', function() {
        // ð¯§Ÿ CJK COMPATIBILITY IDEOGRAPH-2F9DF (U+2F9DF) f0 af a7 9f
        var chars = [
            0xEF,0xBB,0xBF,
            240,175,167,159];
        assert.equal('\ufeffð¯§Ÿ', utf8Buffer.unpack(chars));
    });
});
describe('unpack UTF-8 strings', function() {
    it('unpack ð’ˆ“ from a byte buffer', function() {
        // CUNEIFORM SIGN LU2 OPPOSING LU2 (U+12213)
        var chars = [0xF0, 0x92, 0x88, 0x93];
        assert.equal('ð’ˆ“', utf8Buffer.unpack(chars));
    });
    it('unpack ð’ˆ“ð’ˆ“ from a byte buffer', function() {
        // CUNEIFORM SIGN LU2 OPPOSING LU2 (U+12213)
        var chars = [
            0xF0, 0x92, 0x88, 0x93,
            0xF0, 0x92, 0x88, 0x93];
        assert.equal('ð’ˆ“ð’ˆ“', utf8Buffer.unpack(chars));
    });
    it('unpack ð’ˆ“ð’ˆ“$ from a byte buffer', function() {
        // CUNEIFORM SIGN LU2 OPPOSING LU2 (U+12213)
        var chars = [
            0xF0, 0x92, 0x88, 0x93,
            0xF0, 0x92, 0x88, 0x93,
            36];
        assert.equal('ð’ˆ“ð’ˆ“$', utf8Buffer.unpack(chars));
    });
    it('unpack ð’ˆ“ð’ˆ“$ï§¸ from a byte buffer', function() {
        // CUNEIFORM SIGN LU2 OPPOSING LU2 (U+12213)
        var chars = [
            0xF0, 0x92, 0x88, 0x93,
            0xF0, 0x92, 0x88, 0x93,
            36,
            239, 167, 184];
        assert.equal('ð’ˆ“ð’ˆ“$ï§¸', utf8Buffer.unpack(chars));
    });
    it('unpack BOM + ð’ˆ“ð’ˆ“$ï§¸ from a byte buffer', function() {
        // CUNEIFORM SIGN LU2 OPPOSING LU2 (U+12213)
        var chars = [
            0xEF,0xBB,0xBF,
            0xF0, 0x92, 0x88, 0x93,
            0xF0, 0x92, 0x88, 0x93,
            36,
            239, 167, 184];
        assert.equal('\ufeffð’ˆ“ð’ˆ“$ï§¸', utf8Buffer.unpack(chars));
    });
});
describe('unpack UTF-8 strings, 4 bytes', function() {
    it('unpack ð¯§Ÿ from a byte buffer', function() {
        // ð¯§Ÿ   CJK COMPATIBILITY IDEOGRAPH-2F9DF (U+2F9DF) f0 af a7 9f
        var chars = [240,175,167,159];
        assert.equal('ð¯§Ÿ', utf8Buffer.unpack(chars));
    });
    it('unpack ð¯§Ÿð¯§Ÿ from a byte buffer', function() {
        var chars = [
            240,175,167,159,
            240,175,167,159];
        assert.equal('ð¯§Ÿð¯§Ÿ', utf8Buffer.unpack(chars));
    });
    it('unpack ð¯§Ÿð¯§Ÿï§¸ß¹~$ from a byte buffer', function() {
        var chars = [
            240,175,167,159,
            240,175,167,159,
            239, 167, 184,
            223, 185,
            126,
            36];
        assert.equal('ð¯§Ÿð¯§Ÿï§¸ß¹~$', utf8Buffer.unpack(chars));
    });
    it('unpack ð¯§Ÿð¯§Ÿï§¸ß¹~$ð¯§Ÿ from a byte buffer', function() {
        var chars = [
            240,175,167,159,
            240,175,167,159,
            239, 167, 184,
            223, 185,
            126,
            36,
            240,175,167,159];
        assert.equal('ð¯§Ÿð¯§Ÿï§¸ß¹~$ð¯§Ÿ', utf8Buffer.unpack(chars));
    });
});
describe('unpack UTF-8 strings, 3 bytes', function() {
    it('unpack ï§¸ from a byte buffer', function() {
        // CJK COMPATIBILITY IDEOGRAPH-F9F8 (U+F9F8) ef a7 b8 // 239 167 184
        var chars = [239, 167, 184];
        assert.equal('ï§¸', utf8Buffer.unpack(chars));
    });
    it('unpack ï§¸ï§¸ from a byte buffer', function() {
        var chars = [239, 167, 184, 239, 167, 184];
        assert.equal('ï§¸ï§¸', utf8Buffer.unpack(chars));
    });
    it('unpack ï§¸ï§¸ß¹~$ from a byte buffer', function() {
        var chars = [
            239, 167, 184,
            239, 167, 184,
            223, 185,
            126,
            36];
        assert.equal('ï§¸ï§¸ß¹~$', utf8Buffer.unpack(chars));
    });
    it('unpack ï§¸ï§¸ß¹~$ï§¸ from a byte buffer', function() {
        var chars = [
            239, 167, 184,
            239, 167, 184,
            223, 185,
            126,
            36,
            239, 167, 184];
        assert.equal('ï§¸ï§¸ß¹~$ï§¸',utf8Buffer.unpack(chars));
    });
});
describe('unpack UTF-8 strings, 2 bytes', function() {
    it('unpack Ã¥ from a byte buffer', function() {
        var chars = [195,165];
        assert.equal('Ã¥', utf8Buffer.unpack(chars));
    });
    it('unpack ß¹ from a byte buffer', function() {
        var chars = [223, 185]; // NKO EXCLAMATION MARK (U+07F9)
        assert.equal('ß¹', utf8Buffer.unpack(chars));
    });
    it('unpack ß¹ß¹ from a byte buffer', function() {
        var chars = [223, 185, 223, 185];
        assert.equal('ß¹ß¹', utf8Buffer.unpack(chars));
    });
    it('unpack ß¹ß¹~$ from a byte buffer', function() {
        var chars = [223, 185, 223, 185, 126, 36];
        assert.equal('ß¹ß¹~$', utf8Buffer.unpack(chars));
    });
    it('unpack ß¹ß¹~$ß¹ from a byte buffer', function() {
        var chars = [223, 185, 223, 185, 126, 36, 223, 185];
        assert.equal('ß¹ß¹~$ß¹', utf8Buffer.unpack(chars));
    });
});
describe('unpack UTF-8 strings, 1 byte', function() {
    it('unpack ~ from a byte buffer', function() {
        var chars = [126]; // TILDE (U+007E)  7e
        assert.equal('~', utf8Buffer.unpack(chars));
    });
    it('unpack ~~ from a byte buffer', function() {
        var chars = [126, 126];
        assert.equal('~~', utf8Buffer.unpack(chars));
    });
    it('unpack ~~$ from a byte buffer', function() {
        var chars = [126, 126, 36];
        assert.equal('~~$', utf8Buffer.unpack(chars));
    });
    it('unpack ~~$~ from a byte buffer', function() {
        var chars = [126, 126, 36, 126];
        assert.equal('~~$~', utf8Buffer.unpack(chars));
    });
});
describe('unpack ASCII strings', function() {
    it('unpack $ from a byte buffer', function() {
        var chars = [36];
        assert.equal('$', utf8Buffer.unpack(chars));
    });
    it('unpack $$ from a byte buffer', function() {
        var chars = [36, 36];
        assert.equal('$$', utf8Buffer.unpack(chars));
    });
});
